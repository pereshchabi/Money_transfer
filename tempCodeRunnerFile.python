from flask import Flask, render_template, redirect, url_for, request
import json
import time

app = Flask(__name__)

# Chemin des fichiers JSON
USERS_FILE = "users.json"

# Charger les utilisateurs depuis le fichier JSON
def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)

# Initialiser les utilisateurs et les connexions
users = load_users()
if "admin" not in users:
    users["admin"] = "securepassword123"  # Mot de passe administrateur par défaut
    save_users(users)

logged_in_users = {}
pending_transactions = []

@app.route('/')
def home():
    return render_template('home.html', logged_in=bool(logged_in_users))


@app.route('/login', methods=['GET', 'POST'])
def login():
    global logged_in_users
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        if username in users and users[username] == password:
            logged_in_users[username] = True

            if username == "admin":
                return redirect(url_for('admin_dashboard'))

            return redirect(url_for('transfers'))

        return render_template('login.html', error="Nom d'utilisateur ou mot de passe incorrect")

    return render_template('login.html')
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users:
            return render_template('register.html', error="Ce nom d'utilisateur existe déjà.")
        users[username] = password
        save_users(users)
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/transfers', methods=['GET', 'POST'])
def transfers():
    if request.method == 'POST':
        sender_network = request.form['sender_network']
        receiver_network = request.form['receiver_network']
        transaction_number = request.form['transaction_number']
        receiver_name = request.form['receiver_name']
        receiver_number = request.form['receiver_number']

        transaction = {
            'sender_network': sender_network,
            'receiver_network': receiver_network,
            'transaction_number': transaction_number,
            'receiver_name': receiver_name,
            'receiver_number': receiver_number,
            'status': 'En attente',
            'submitted_time': int(time.time())
        }
        pending_transactions.append(transaction)
        return render_template('waiting.html', transaction=transaction)

    return render_template('transfers.html', logged_in=bool(logged_in_users))
@app.route('/check_transaction_status/<int:submitted_time>', methods=['GET'])
def check_transaction_status(submitted_time):
    if submitted_time < 0 or submitted_time >= len(pending_transactions):
        return jsonify({'error': 'Transaction not found'}), 404
    
    transaction = pending_transactions[submitted_time]
    return jsonify({'status': transaction['status']})

@app.route('/admin')
def admin_dashboard():
    if "admin" not in logged_in_users or not logged_in_users["admin"]:
        return redirect(url_for('login'))

    return render_template(
        'admin_dashboard.html', 
        transactions=pending_transactions,
        no_transactions=(len(pending_transactions) == 0)
    )

@app.route('/validate_transfer/<int:submitted_time>', methods=['POST'])
def validate_transfer(submitted_time):
    if "admin" not in logged_in_users or not logged_in_users["admin"]:
        return redirect(url_for('login'))

    if submitted_time < 0 or submitted_time >= len(pending_transactions):
        return redirect(url_for('admin_dashboard'))

    pending_transactions[submitted_time]['status'] = 'Prise en compte'
    return redirect(url_for('admin_dashboard'))

@app.route('/reject_transfer/<int:submitted_time>', methods=['POST'])
def reject_transfer(submitted_time):
    if "admin" not in logged_in_users or not logged_in_users["admin"]:
        return redirect(url_for('login'))

    if submitted_time < 0 or submitted_time >= len(pending_transactions):
        return redirect(url_for('admin_dashboard'))

    pending_transactions[submitted_time]['status'] = 'Non prise en compte'
    return redirect(url_for('admin_dashboard'))

@app.route('/logout')
def logout():
    global logged_in_users
    logged_in_users = {}
    return redirect(url_for('home'))

if __name__ == '__main__':
    app.run(debug=True)
